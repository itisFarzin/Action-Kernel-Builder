# This is a basic workflow to help you get started with Actions

name: Kernel Build

on:
  workflow_dispatch:
    inputs:
      BUILD_TITLE:
        description: 'Custom Build Title'
        required: false
      KERNEL_TREE:
        description: 'Kernel Tree'
        required: true
        default: 'https://github.com/itisFarzin/android_kernel_xiaomi_southwest-4.19'
      KERNEL_TREE_BRANCH:
        description: 'Kernel Tree Branch'
        required: true
        default: 'main'
      DEVICE_CODENAME:
        description: 'Device CodeName'
        required: true
        default: 'platina'
      ENABLE_KERNELSU:
        description: 'Enable KernelSU'
        type: boolean
        default: true
      ANYKERNEL_URL:
        description: 'AnyKernel Url (leave blank if you dont want AnyKernel)'
        required: false
        default: 'https://github.com/itisFarzin/AnyKernel3'
      CLANG_VERSION:
        type: choice
        description: Choose Clang Version
        options: 
        - '18'
        - '17'
        - '16'
        - '15'
        - '14'
        - '13'
        - '12'
        - '11'
        - '10'
        - '9'

jobs:
  build:
    if: github.event.repository.owner.id == github.event.sender.id
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    steps:

    - name: Initialize workspace
      run: |
        mkdir workspace
        cd workspace

        echo "workspace-folder=$(pwd)" >> $GITHUB_OUTPUT
        echo "start_time=$(date +%s)" >> $GITHUB_OUTPUT
        echo "kernelsu=${{ fromJSON('["No", "Yes"]')[fromJSON(github.event.inputs.ENABLE_KERNELSU)] }}" >> $GITHUB_OUTPUT
        if [[ -z "${{ github.event.inputs.BUILD_TITLE }}" ]]; then
          echo "build_title=${{ github.event.inputs.DEVICE_CODENAME }}${{ fromJSON('["", "-KSU"]')[fromJSON(github.event.inputs.ENABLE_KERNELSU)] }}" >> $GITHUB_OUTPUT
        else
          echo "build_title=${{ github.event.inputs.BUILD_TITLE }}" >> $GITHUB_OUTPUT
        fi
      id: workspace

    - name: Prepare the build environment
      run: |
        sudo apt-get install flex
        
        git clone https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9 -b android-msm-redbull-4.19-android14 --depth=1
        git clone https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9 -b android-msm-redbull-4.19-android14 --depth=1

        wget https://apt.llvm.org/llvm.sh
        chmod u+x llvm.sh
        sudo ./llvm.sh ${{ github.event.inputs.CLANG_VERSION }}

        echo "tools-folder=$(pwd)" >> $GITHUB_OUTPUT
      working-directory: ${{ steps.workspace.outputs.workspace-folder }}
      id: tools

    - name: Clone kernel source
      run: |
        git clone --depth=1 ${{ github.event.inputs.KERNEL_TREE }} -b ${{ github.event.inputs.KERNEL_TREE_BRANCH }} kernel_tree

        echo "kernel-folder=$(pwd)/kernel_tree" >> $GITHUB_OUTPUT
      working-directory: ${{ steps.workspace.outputs.workspace-folder }}
      id: kernel

    - name: Adding KernelSU
      if: ${{ github.event.inputs.ENABLE_KERNELSU }}
      run: |
        # Delete old KernelSU
        if [ -d "KernelSU" ]; then
          rm -rf "KernelSU"
        fi
        if [ -d "drivers/kernelsu" ]; then
          rm -rf "drivers/kernelsu"
        fi

        curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -
      working-directory: ${{ steps.kernel.outputs.kernel-folder }}

    - name: Building kernel
      run: |
        export PATH="${{ steps.tools.outputs.tools-folder }}/aarch64-linux-android-4.9/bin:$PATH"
        export PATH="${{ steps.tools.outputs.tools-folder }}/arm-linux-androideabi-4.9/bin:$PATH"

        export ARCH=arm64
        export SUBARCH=ARM64
        export CLANG_TRIPLE=aarch64-linux-gnu-
        export CROSS_COMPILE=aarch64-linux-android-
        export CROSS_COMPILE_ARM32=arm-linux-androideabi-

        make O=out clean mrproper CC=clang-${{ github.event.inputs.CLANG_VERSION }} ${{ github.event.inputs.DEVICE_CODENAME }}_defconfig
        make O=out CC=clang-${{ github.event.inputs.CLANG_VERSION }} -j$(nproc --all)

        echo "elapsed_time=$(echo "$(date +%s)"-"${{ steps.workspace.outputs.start_time }}" | bc)" >> $GITHUB_OUTPUT
      working-directory: ${{ steps.kernel.outputs.kernel-folder }}
      id: build

    - name: AnyKernel3
      if: ${{ success() && github.event.inputs.ANYKERNEL_URL != '' }}
      continue-on-error: true
      run: |
        git clone --recursive --depth=1 ${{ github.event.inputs.ANYKERNEL_URL }} AnyKernel3

        if [ -e "Image.gz-dtb" ]; then
          cp -f Image.gz-dtb AnyKernel3
        elif [ -e "Image.gz" ]; then
          cp -f Image.gz AnyKernel3
        fi

        cd AnyKernel3
        zip -q -r "FlashableKernel.zip" *
      working-directory: ${{ steps.kernel.outputs.kernel-folder }}/out/arch/arm64/boot/

    - name: Check the output directory before uploading
      run: |
        ls -al ${{ steps.kernel.outputs.kernel-folder }}/out/arch/arm64/boot/

    - uses: actions/upload-artifact@v3
      if: ${{ success() }}
      with:
        name: Image.gz-dtb
        path: ${{ steps.kernel.outputs.kernel-folder }}/out/arch/arm64/boot/Image.gz-dtb

    - uses: actions/upload-artifact@v3
      if: ${{ success() && github.event.inputs.ANYKERNEL_URL != '' }}
      with:
        name: FlashableKernel.zip
        path: ${{ steps.kernel.outputs.kernel-folder }}/out/arch/arm64/boot/AnyKernel3/
    
    - name: Send Telegram notification for success
      uses: appleboy/telegram-action@master
      env: 
        TELEGRAM_TO: ${{ secrets.TELEGRAM_TO }}
      if: ${{ success() && env.TELEGRAM_TO != '' }}
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        disable_web_page_preview: true
        message: |
          <b>${{ steps.workspace.outputs.build_title }}</b>
          <b>Kernel successfully built!</b>, took ${{ steps.build.outputs.elapsed_time }} seconds.
          
          <b>Kernel tree</b>: ${{ github.event.inputs.KERNEL_TREE }}
          <b>Kernel Tree Branch</b>: ${{ github.event.inputs.KERNEL_TREE_BRANCH }}
          <b>KernelSU</b>: ${{ steps.workspace.outputs.kernelsu }}
          <b>Action</b>: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        document: ${{ steps.kernel.outputs.kernel-folder }}/out/arch/arm64/boot/AnyKernel3/FlashableKernel.zip
        format: html

    - name: Send Telegram notification for failure
      uses: appleboy/telegram-action@master
      env: 
        TELEGRAM_TO: ${{ secrets.TELEGRAM_TO }}
      if: ${{ failure() && env.TELEGRAM_TO != '' }}
      with:
        to: ${{ secrets.TELEGRAM_CHAT_ID }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        disable_web_page_preview: true
        message: |
          <b>${{ steps.workspace.outputs.build_title }}</b>
          <b>Failed building kernel</b>, check ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }} for more info.
          
          <b>Kernel tree</b>: ${{ github.event.inputs.KERNEL_TREE }}
          <b>Kernel Tree Branch</b>: ${{ github.event.inputs.KERNEL_TREE_BRANCH }}
          <b>KernelSU</b>: ${{ steps.workspace.outputs.kernelsu }}
        format: html
